Final for CIS 5 

Points for each quesiton
1 15
2 15
3 15
4 15
5 20
6 20

Extra Credit:  
Write a function void MarkNumber(char) that takes an input character 
between 0 and 127 then outputs a string of numbers in the following form

Input     Output
0         0
9         0123456789
19        01234567890123456789
25        01234567890123456789012345


Note: Submit the Final to my personal email account mark.lehr@rcc.edu 
with the following subject:  LastName,FirstName - FinalCSC5 - section number. 
Submit the solutions/program in a zipped file by December 16th, 2011 before midnight. 
Do the best you can and turn in as much as you can.  You will present
your projects in class on Tuesday, 

Note:  I just want one program for all the solutions to follow. 
The program should prompt the user for which problem solution to display. 
Code each problem in its own function such as void Problem1(void), 
void Problem2(void), etc.....


/*Problem 1
Write a function that takes an unsigned
short integer and returns an usigned short
number in reverse.  For instance 103 
reversed would be 301.  Another would be 
3000 gives 3.  Check to make sure the 
conversion falls within the range for an 
unsigned short. If it doesn't then output
no coversion possible.
*/


/*
Problem 2
Write a program that plays the game "Guess the
Number" as follows.  Your program chooses the
number to be guessed by selecting an integer
at random in the range 1 to 1000.  The program
displays


I have a number between 1 and 1000
Can you guess my number?  You will be
given a maximum of 10 guesses.
Please type your first guess.


The player then types a guess.  The
program responds with one of the following.


1. You guessed the number!
   Would you like to play again(y or n)?
2. Too low.  Try again.
3. Too High. Try again.
4. Too many tries.
*/


/*
Problem 3
Write a function called multiple that determines for
a pair of integers whether the first integer
is a multiple of the second.  The function
should take two integer arguments and return
true if the first is a multiple of the second,
false otherwise.


Something like this


if(multiple(x,y))cout<<"TRUE it is a multiple"<<endl;
else cout<<"FALSE not a multiple"<<endl;


multiple(6,4) -> FALSE
multiple(8,4) -> TRUE


multiple(b,a)  if x=b/a and a*x=b then it is a multiple
remember the above uses integer math!


*/


/*
Problem #4  (Random Sequence)
        Create a function/method/procedure that
returns a random number from the following set,
{19,50,78,161,252}.  Loop 10000 times with this 
procedure in and print the frequency of each of 
the 5 numbers obtained.  Hint: Use an array for 
the sequence and frequency.  


The following is a brief hint on items that might 
be helpful in obtaining the results.  This is not 
direct code but more pseudo code related.  Don't 
try and run the following directly and more code 
will be needed.


Setup
        const int n=5,ntimes=10000;
        int freq[n]={0};
        short int rndseq[]={19,50,78,161,252};


Call to the routine to return a random sequence
        retrand(freq,n,ntimes);


Results
        cout<<rndseq[i]<<" occured "<<
                freq[i]<<" times"<<endl;


Sample Output
        19 occured 2055 times
        50 occured 1986 times
        78 occured 1962 times
        161 occured 2079 times
        252 occured 1919 times


Note:  Your results are not expected to be exactly
the same!  After all these are pseudo-random 
number sequences with different seeds.  
*/


/*
Problem #5  (All Kinds of Sorting)
Note:  Do only one of the following parts (a),(b), 
or (c) but the most points will be given for those attempting and completing (c).


(a)  Sort a column array of 10 integers.  Largest located at index [0] 
and smallest at index [9].  
Create a procedure that passes the array to a 
print routine, then a procedure that sorts the array 
and returns the sorted array to the procedure, 
and finish by using the same print routine.  Fill the array with
{1,7,4,0,9,4,8,8,2,4}.
Output would be
{9,8,8,7,4,4,4,2,1,0}.


(b)  Sort a column array of 10 characters.  Largest located at index [0] and 
smallest at index [9].  Create a procedure that passes the array to a print routine, 
then a procedure that sorts the array and returns the sorted array to the procedure, 
and finish by using the same print routine.  Fill the array with
{B,H,E,A,J,E,I,I,C,E}.
Output would be
{J,I,I,H,E,E,E,C,B,A}.


(c)  Sort a 10x15 array of characters.  Largest located
at index [0][0-14] and smallest at index [9][0-14].  
Create a procedure that passes the array to a print routine, 
then a procedure that sorts the array and returns the sorted array 
to the original procedure, and finish by using the same print routine.  
Fill the array with


Lcekoeddhoffbmb
Lkcmggjcdhhglif
Cgldjhcekjigcdd
Cgldjhcekjigcdn
Bffmdbkcenlafjk
Fggdijijegfblln
Jjlncnimjldfedj
Amliglfohajcdmm
Balgfcaelhfkgeb
Kmlhmhcddfoeild


Note:  This is a character array but the sorting is 
done as if there are 10 strings with each string having 15characters.  
The output would be


Lkcmggjcdhhglif
Lcekoeddhoffbmb
Kmlhmhcddfoeild
Jjlncnimjldfedj
Fggdijijegfblln
Cgldjhcekjigcdn
Cgldjhcekjigcdd
Bffmdbkcenlafjk
Balgfcaelhfkgeb
Amliglfohajcdmm


*/


/*
Problem #6  (Spreadsheet Stuff)
        Create the following input tables.  Output
the sum of the rows, columns and grand total.  You
will need to create procedures that print the table,
then sum rows, columns and grand total, then pass
that information to the same print routine.  Note:
the 2 procedures printTable,SumTable and finally a
call to printTable again are all invoked from subroutine 
main.  I want to see each number formated to 6 spaces.  
Print the table out exactly as below.


Example Input Table
   100   101   102   103   104   105
   106   107   108   109   110   111
   112   113   114   115   116   117
   118   119   120   121   122   123
   124   125   126   127   128   129
Example Output Table with rows summed,
columns summed and the grand total printed.
   100   101   102   103   104   105   615
   106   107   108   109   110   111   651
   112   113   114   115   116   117   687
   118   119   120   121   122   123   723
   124   125   126   127   128   129   759
   560   565   570   575   580   585  3435
Test Case Input Table
   141   567   434   100   269   324
   578   458   562   564   305   245
   381   427   561   591   595   542
   427   536   491   204   502   253
   392   482   521   316   318   495
What is the output from the above Test Case???


More credit will be given if you read the input and write 
the results to a file.  However, if you can't do this in 
a procedure.  But full credit 
will not be given for the problem if files
are not utilized. 
